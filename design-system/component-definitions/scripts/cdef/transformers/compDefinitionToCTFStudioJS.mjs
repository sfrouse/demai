


export default function compDefitionToCTFStudio(cdef, clsName) {
    if (!cdef) return '';
    const xCDef = cdef['x-cdef'];
    const tag = xCDef?.tag || cdef.$id;
    const name = xCDef?.name || tag;

    const studioCDef = {
        id: tag,
        name,
        category: 'Components',
        // thumbnailUrl: '' // JSDoc needed
        buildInStyles: xCDef.content?.contentfulBuiltInStyles || [], // JSDoc needed
    };

    // process variables...
    if (cdef.properties) {
        const variables = [];
        Object.entries(cdef.properties).map(entry => {
            const name = entry[0];
            const property = entry[1];
            if (['$schema', '$identifier'].indexOf(name) !== -1) return;
            const xCDef = property['x-cdef'];
            if (xCDef.hidden === true) return;
            if (xCDef.output?.webComponent?.slot === true) {
                studioCDef.children = true;
                return;
            }

            const variable = {
                type: cdefTypeToStudioType(property.type),
                group: xCDef.output?.content?.content === true ? 'content' : 'style',
                displayName: property.title,
                defaultValue: xCDef.input?.defaultValue || undefined,
            }
            if (xCDef.input?.options) { // property.enum) {
                const inValidations = [];
                Object.entries(xCDef.input.options).map(option => {
                    const optionName = option[0];
                    const optionValue = option[1];
                    inValidations.push({
                        value: optionValue,
                        displayName: optionName
                    });
                });
                variable.validations = {
                    in: inValidations
                }
            }

            // add to variables
            variables.push(variable);
        });

        // make sure it is the last property in the object
        studioCDef.variables = variables;
    }

    return `/* eslint-disable */
// @ts-nocheck
/**
 * THIS FILE IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY.
 * Any changes made here will be overwritten during the next build.
 * 
 * Generated on: ${new Date().toISOString().split('T')[0]}
 */

export const ${clsName}Definition = ${JSON.stringify(studioCDef, null, 2)};`;
}

function cdefTypeToStudioType(cdefType) {
    switch( cdefType ) {
        case 'string' :
            return 'Text';
        // return RichText
        case 'boolean' :
            return 'Boolean';
        case 'number' :
            return 'Number';
        case 'date' :
            return 'Date';
        case 'object' :
            return 'Object';
        case 'richText' :
            return 'RichText';
        // return Location
        // return Media
        default:
            return 'Text'
    }
}